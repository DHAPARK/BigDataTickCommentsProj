/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.67
 * Generated at: 2022-11-01 07:11:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.bubble_005fchart;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class bubble_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<script src=\"https://code.highcharts.com/highcharts.js\"></script>\r\n");
      out.write("<script src=\"https://code.highcharts.com/highcharts-more.js\"></script>\r\n");
      out.write("<script src=\"https://code.highcharts.com/modules/exporting.js\"></script>\r\n");
      out.write("<script src=\"https://code.highcharts.com/modules/accessibility.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<figure class=\"highcharts-figure\">\r\n");
      out.write("  <div id=\"container\"></div>\r\n");
      out.write("  \r\n");
      out.write("</figure>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write(" Highcharts.chart('container', {\r\n");
      out.write("  chart: {\r\n");
      out.write("    type: 'packedbubble',\r\n");
      out.write("    height: '50%'\r\n");
      out.write("  },\r\n");
      out.write("  title: {\r\n");
      out.write("    text: 'Comments by age'\r\n");
      out.write("  },\r\n");
      out.write("  tooltip: {\r\n");
      out.write("    useHTML: true,\r\n");
      out.write("    pointFormat: '<b>{point.name}:</b> {point.value}m CO<sub>2</sub>'\r\n");
      out.write("  },\r\n");
      out.write("  plotOptions: {\r\n");
      out.write("    packedbubble: {\r\n");
      out.write("      minSize: '10%',\r\n");
      out.write("      maxSize: '50%',\r\n");
      out.write("      zMin: 0,\r\n");
      out.write("      zMax: 1000,\r\n");
      out.write("      layoutAlgorithm: {\r\n");
      out.write("        gravitationalConstant: 0.05,\r\n");
      out.write("        splitSeries: true,\r\n");
      out.write("        seriesInteraction: false,\r\n");
      out.write("        dragBetweenSeries: true,\r\n");
      out.write("        parentNodeLimit: true\r\n");
      out.write("      },\r\n");
      out.write("      dataLabels: {\r\n");
      out.write("        enabled: true,\r\n");
      out.write("        format: '{point.name}',\r\n");
      out.write("        filter: {\r\n");
      out.write("          property: 'y',\r\n");
      out.write("          operator: '>',\r\n");
      out.write("          value: 150\r\n");
      out.write("        },\r\n");
      out.write("        style: {\r\n");
      out.write("          color: 'black',\r\n");
      out.write("          textOutline: 'none',\r\n");
      out.write("          fontWeight: 'normal'\r\n");
      out.write("        }\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("  },\r\n");
      out.write("  series: [ {\r\n");
      out.write("    name: 'Africa',\r\n");
      out.write("    data: [{\r\n");
      out.write("      name: \"United Republic of Tanzania\",\r\n");
      out.write("      value: 9.1\r\n");
      out.write("    },\r\n");
      out.write("    {\r\n");
      out.write("      name: \"Nigeria\",\r\n");
      out.write("      value: 93.9\r\n");
      out.write("    },\r\n");
      out.write("    {\r\n");
      out.write("      name: \"South Africa\",\r\n");
      out.write("      value: 392.7\r\n");
      out.write("    }, {\r\n");
      out.write("      name: \"Egypt\",\r\n");
      out.write("      value: 225.1\r\n");
      out.write("    }, {\r\n");
      out.write("      name: \"Algeria\",\r\n");
      out.write("      value: 141.5\r\n");
      out.write("    }]\r\n");
      out.write("  }]\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
